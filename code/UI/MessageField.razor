@using System
@using Sandbox
@using Sandbox.UI

@namespace ThekiFake.Courtroom
@inherits Panel

<root>
	<div id="container-callouts">
		@if ( Callouts is not null )
		{
			@foreach ( Callout callout in Enum.GetValues( typeof(Callout) ) )
			{
				@if ( Callouts[(int)callout] )
				{
					<label class="btn" onclick="@(() => SetCallout( callout ))">@Message.CalloutString( callout )</label>
				}
			}
		}
	</div>
	<div id="container-textentry">
		<MessageTextEntry @ref="Entry" Placeholder="ENTER to send" Parent="@this" MinLength="@(2)" MaxLength="@(200)" />
	</div>
</root>

@code
{
	public static MessageField Current;
	
	public MessageTextEntry Entry;
	public Callout SelectedCallout = Callout.None;
	bool[] Callouts;

	public MessageField()
	{
		Current = this;
	}

	[GameEvent.Client.BuildInput]
	void BuildInput()
	{
		if ( Input.Pressed( "Chat" ) )
		{
			if ( HasClass( "open" ) ) Close();
			else
			{
				Open();
				Entry.Focus();
			}
		}
	}

	[CourtEvent.MessageSent]
	public void SentMessage()
	{
		Sandbox.Services.Stats.Increment( "messages_sent", 1 );
		CourtroomGame.Speak( Entry.Text.Trim(), SelectedCallout );
		Entry.Text = "";
		SetCallout( Callout.None );
		Close();
	}
	
	// There is obviously a better way to do this
	[ClientRpc]
	public static void SetPossibleCallouts( bool[] callouts )
	{
		Current.Callouts = callouts;
	}

	void SetCallout( Callout callout )
	{
		SelectedCallout = callout;
		Entry.Placeholder = Message.CalloutString( callout );
	}

	public void Open()
	{
		AddClass( "open" );
		RemoveClass( "close" );
		StateHasChanged();
	}
	
	public void Close()
	{
		AddClass( "close" );
		RemoveClass( "open" );
	}
}
